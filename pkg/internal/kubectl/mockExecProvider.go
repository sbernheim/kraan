// Code generated by MockGen. DO NOT EDIT.
// Source: execProvider.go

// Package kubectl is a generated GoMock package.
package kubectl

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecProvider is a mock of ExecProvider interface
type MockExecProvider struct {
	ctrl     *gomock.Controller
	recorder *MockExecProviderMockRecorder
}

// MockExecProviderMockRecorder is the mock recorder for MockExecProvider
type MockExecProviderMockRecorder struct {
	mock *MockExecProvider
}

// NewMockExecProvider creates a new mock instance
func NewMockExecProvider(ctrl *gomock.Controller) *MockExecProvider {
	mock := &MockExecProvider{ctrl: ctrl}
	mock.recorder = &MockExecProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecProvider) EXPECT() *MockExecProviderMockRecorder {
	return m.recorder
}

// findOnPath mocks base method
func (m *MockExecProvider) findOnPath(file string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "findOnPath", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// findOnPath indicates an expected call of findOnPath
func (mr *MockExecProviderMockRecorder) findOnPath(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "findOnPath", reflect.TypeOf((*MockExecProvider)(nil).findOnPath), file)
}

// execCmd mocks base method
func (m *MockExecProvider) execCmd(name string, arg ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "execCmd", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// execCmd indicates an expected call of execCmd
func (mr *MockExecProviderMockRecorder) execCmd(name interface{}, arg ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "execCmd", reflect.TypeOf((*MockExecProvider)(nil).execCmd), varargs...)
}
