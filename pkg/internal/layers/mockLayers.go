// Code generated by MockGen. DO NOT EDIT.
// Source: layers.go

// Package layers is a generated GoMock package.
package layers

import (
	context "context"
	v1alpha1 "github.com/fidelity/kraan/pkg/api/v1alpha1"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockLayer is a mock of Layer interface
type MockLayer struct {
	ctrl     *gomock.Controller
	recorder *MockLayerMockRecorder
}

// MockLayerMockRecorder is the mock recorder for MockLayer
type MockLayerMockRecorder struct {
	mock *MockLayer
}

// NewMockLayer creates a new mock instance
func NewMockLayer(ctrl *gomock.Controller) *MockLayer {
	mock := &MockLayer{ctrl: ctrl}
	mock.recorder = &MockLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLayer) EXPECT() *MockLayerMockRecorder {
	return m.recorder
}

// SetStatusK8sVersion mocks base method
func (m *MockLayer) SetStatusK8sVersion() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusK8sVersion")
}

// SetStatusK8sVersion indicates an expected call of SetStatusK8sVersion
func (mr *MockLayerMockRecorder) SetStatusK8sVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusK8sVersion", reflect.TypeOf((*MockLayer)(nil).SetStatusK8sVersion))
}

// SetStatusApplying mocks base method
func (m *MockLayer) SetStatusApplying() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusApplying")
}

// SetStatusApplying indicates an expected call of SetStatusApplying
func (mr *MockLayerMockRecorder) SetStatusApplying() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusApplying", reflect.TypeOf((*MockLayer)(nil).SetStatusApplying))
}

// SetStatusApply mocks base method
func (m *MockLayer) SetStatusApply() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusApply")
}

// SetStatusApply indicates an expected call of SetStatusApply
func (mr *MockLayerMockRecorder) SetStatusApply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusApply", reflect.TypeOf((*MockLayer)(nil).SetStatusApply))
}

// SetStatusApplyPending mocks base method
func (m *MockLayer) SetStatusApplyPending() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusApplyPending")
}

// SetStatusApplyPending indicates an expected call of SetStatusApplyPending
func (mr *MockLayerMockRecorder) SetStatusApplyPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusApplyPending", reflect.TypeOf((*MockLayer)(nil).SetStatusApplyPending))
}

// SetStatusPrunePending mocks base method
func (m *MockLayer) SetStatusPrunePending() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusPrunePending")
}

// SetStatusPrunePending indicates an expected call of SetStatusPrunePending
func (mr *MockLayerMockRecorder) SetStatusPrunePending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusPrunePending", reflect.TypeOf((*MockLayer)(nil).SetStatusPrunePending))
}

// SetStatusPruned mocks base method
func (m *MockLayer) SetStatusPruned() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusPruned")
}

// SetStatusPruned indicates an expected call of SetStatusPruned
func (mr *MockLayerMockRecorder) SetStatusPruned() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusPruned", reflect.TypeOf((*MockLayer)(nil).SetStatusPruned))
}

// SetStatusPruning mocks base method
func (m *MockLayer) SetStatusPruning() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusPruning")
}

// SetStatusPruning indicates an expected call of SetStatusPruning
func (mr *MockLayerMockRecorder) SetStatusPruning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusPruning", reflect.TypeOf((*MockLayer)(nil).SetStatusPruning))
}

// SetStatusDeployed mocks base method
func (m *MockLayer) SetStatusDeployed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusDeployed")
}

// SetStatusDeployed indicates an expected call of SetStatusDeployed
func (mr *MockLayerMockRecorder) SetStatusDeployed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusDeployed", reflect.TypeOf((*MockLayer)(nil).SetStatusDeployed))
}

// StatusUpdate mocks base method
func (m *MockLayer) StatusUpdate(status, reason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusUpdate", status, reason, message)
}

// StatusUpdate indicates an expected call of StatusUpdate
func (mr *MockLayerMockRecorder) StatusUpdate(status, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockLayer)(nil).StatusUpdate), status, reason, message)
}

// setStatus mocks base method
func (m *MockLayer) setStatus(status, reason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setStatus", status, reason, message)
}

// setStatus indicates an expected call of setStatus
func (mr *MockLayerMockRecorder) setStatus(status, reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setStatus", reflect.TypeOf((*MockLayer)(nil).setStatus), status, reason, message)
}

// IsHold mocks base method
func (m *MockLayer) IsHold() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHold")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHold indicates an expected call of IsHold
func (mr *MockLayerMockRecorder) IsHold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHold", reflect.TypeOf((*MockLayer)(nil).IsHold))
}

// SetHold mocks base method
func (m *MockLayer) SetHold() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHold")
}

// SetHold indicates an expected call of SetHold
func (mr *MockLayerMockRecorder) SetHold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHold", reflect.TypeOf((*MockLayer)(nil).SetHold))
}

// IsPruningRequired mocks base method
func (m *MockLayer) IsPruningRequired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPruningRequired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPruningRequired indicates an expected call of IsPruningRequired
func (mr *MockLayerMockRecorder) IsPruningRequired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPruningRequired", reflect.TypeOf((*MockLayer)(nil).IsPruningRequired))
}

// Prune mocks base method
func (m *MockLayer) Prune() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune")
	ret0, _ := ret[0].(error)
	return ret0
}

// Prune indicates an expected call of Prune
func (mr *MockLayerMockRecorder) Prune() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockLayer)(nil).Prune))
}

// SetAllPrunePending mocks base method
func (m *MockLayer) SetAllPrunePending() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllPrunePending")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllPrunePending indicates an expected call of SetAllPrunePending
func (mr *MockLayerMockRecorder) SetAllPrunePending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllPrunePending", reflect.TypeOf((*MockLayer)(nil).SetAllPrunePending))
}

// SetStatusPruningToPruned mocks base method
func (m *MockLayer) SetStatusPruningToPruned() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusPruningToPruned")
}

// SetStatusPruningToPruned indicates an expected call of SetStatusPruningToPruned
func (mr *MockLayerMockRecorder) SetStatusPruningToPruned() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusPruningToPruned", reflect.TypeOf((*MockLayer)(nil).SetStatusPruningToPruned))
}

// AllPruned mocks base method
func (m *MockLayer) AllPruned() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllPruned")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllPruned indicates an expected call of AllPruned
func (mr *MockLayerMockRecorder) AllPruned() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllPruned", reflect.TypeOf((*MockLayer)(nil).AllPruned))
}

// SetAllPrunedToApplyPending mocks base method
func (m *MockLayer) SetAllPrunedToApplyPending() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllPrunedToApplyPending")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllPrunedToApplyPending indicates an expected call of SetAllPrunedToApplyPending
func (mr *MockLayerMockRecorder) SetAllPrunedToApplyPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllPrunedToApplyPending", reflect.TypeOf((*MockLayer)(nil).SetAllPrunedToApplyPending))
}

// DependenciesDeployed mocks base method
func (m *MockLayer) DependenciesDeployed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DependenciesDeployed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DependenciesDeployed indicates an expected call of DependenciesDeployed
func (mr *MockLayerMockRecorder) DependenciesDeployed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DependenciesDeployed", reflect.TypeOf((*MockLayer)(nil).DependenciesDeployed))
}

// IsApplyRequired mocks base method
func (m *MockLayer) IsApplyRequired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApplyRequired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsApplyRequired indicates an expected call of IsApplyRequired
func (mr *MockLayerMockRecorder) IsApplyRequired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApplyRequired", reflect.TypeOf((*MockLayer)(nil).IsApplyRequired))
}

// SuccessfullyApplied mocks base method
func (m *MockLayer) SuccessfullyApplied() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuccessfullyApplied")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SuccessfullyApplied indicates an expected call of SuccessfullyApplied
func (mr *MockLayerMockRecorder) SuccessfullyApplied() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessfullyApplied", reflect.TypeOf((*MockLayer)(nil).SuccessfullyApplied))
}

// Apply mocks base method
func (m *MockLayer) Apply() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply")
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockLayerMockRecorder) Apply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockLayer)(nil).Apply))
}

// GetStatus mocks base method
func (m *MockLayer) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockLayerMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockLayer)(nil).GetStatus))
}

// GetName mocks base method
func (m *MockLayer) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockLayerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockLayer)(nil).GetName))
}

// GetLogger mocks base method
func (m *MockLayer) GetLogger() logr.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(logr.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger
func (mr *MockLayerMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockLayer)(nil).GetLogger))
}

// GetContext mocks base method
func (m *MockLayer) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext
func (mr *MockLayerMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockLayer)(nil).GetContext))
}

// GetSourcePath mocks base method
func (m *MockLayer) GetSourcePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourcePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourcePath indicates an expected call of GetSourcePath
func (mr *MockLayerMockRecorder) GetSourcePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourcePath", reflect.TypeOf((*MockLayer)(nil).GetSourcePath))
}

// GetTimeout mocks base method
func (m *MockLayer) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout
func (mr *MockLayerMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockLayer)(nil).GetTimeout))
}

// IsUpdated mocks base method
func (m *MockLayer) IsUpdated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpdated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUpdated indicates an expected call of IsUpdated
func (mr *MockLayerMockRecorder) IsUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpdated", reflect.TypeOf((*MockLayer)(nil).IsUpdated))
}

// NeedsRequeue mocks base method
func (m *MockLayer) NeedsRequeue() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsRequeue")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsRequeue indicates an expected call of NeedsRequeue
func (mr *MockLayerMockRecorder) NeedsRequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsRequeue", reflect.TypeOf((*MockLayer)(nil).NeedsRequeue))
}

// IsDelayed mocks base method
func (m *MockLayer) IsDelayed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelayed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDelayed indicates an expected call of IsDelayed
func (mr *MockLayerMockRecorder) IsDelayed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelayed", reflect.TypeOf((*MockLayer)(nil).IsDelayed))
}

// GetDelay mocks base method
func (m *MockLayer) GetDelay() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelay")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDelay indicates an expected call of GetDelay
func (mr *MockLayerMockRecorder) GetDelay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelay", reflect.TypeOf((*MockLayer)(nil).GetDelay))
}

// SetRequeue mocks base method
func (m *MockLayer) SetRequeue() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequeue")
}

// SetRequeue indicates an expected call of SetRequeue
func (mr *MockLayerMockRecorder) SetRequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequeue", reflect.TypeOf((*MockLayer)(nil).SetRequeue))
}

// SetDelayed mocks base method
func (m *MockLayer) SetDelayed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDelayed")
}

// SetDelayed indicates an expected call of SetDelayed
func (mr *MockLayerMockRecorder) SetDelayed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelayed", reflect.TypeOf((*MockLayer)(nil).SetDelayed))
}

// SetUpdated mocks base method
func (m *MockLayer) SetUpdated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpdated")
}

// SetUpdated indicates an expected call of SetUpdated
func (mr *MockLayerMockRecorder) SetUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdated", reflect.TypeOf((*MockLayer)(nil).SetUpdated))
}

// GetRequiredK8sVersion mocks base method
func (m *MockLayer) GetRequiredK8sVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredK8sVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRequiredK8sVersion indicates an expected call of GetRequiredK8sVersion
func (mr *MockLayerMockRecorder) GetRequiredK8sVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredK8sVersion", reflect.TypeOf((*MockLayer)(nil).GetRequiredK8sVersion))
}

// CheckK8sVersion mocks base method
func (m *MockLayer) CheckK8sVersion() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckK8sVersion")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckK8sVersion indicates an expected call of CheckK8sVersion
func (mr *MockLayerMockRecorder) CheckK8sVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckK8sVersion", reflect.TypeOf((*MockLayer)(nil).CheckK8sVersion))
}

// GetFullStatus mocks base method
func (m *MockLayer) GetFullStatus() *v1alpha1.AddonsLayerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullStatus")
	ret0, _ := ret[0].(*v1alpha1.AddonsLayerStatus)
	return ret0
}

// GetFullStatus indicates an expected call of GetFullStatus
func (mr *MockLayerMockRecorder) GetFullStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullStatus", reflect.TypeOf((*MockLayer)(nil).GetFullStatus))
}

// GetSpec mocks base method
func (m *MockLayer) GetSpec() *v1alpha1.AddonsLayerSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpec")
	ret0, _ := ret[0].(*v1alpha1.AddonsLayerSpec)
	return ret0
}

// GetSpec indicates an expected call of GetSpec
func (mr *MockLayerMockRecorder) GetSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpec", reflect.TypeOf((*MockLayer)(nil).GetSpec))
}

// GetAddonsLayer mocks base method
func (m *MockLayer) GetAddonsLayer() *v1alpha1.AddonsLayer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonsLayer")
	ret0, _ := ret[0].(*v1alpha1.AddonsLayer)
	return ret0
}

// GetAddonsLayer indicates an expected call of GetAddonsLayer
func (mr *MockLayerMockRecorder) GetAddonsLayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonsLayer", reflect.TypeOf((*MockLayer)(nil).GetAddonsLayer))
}

// GetAddonsLayers mocks base method
func (m *MockLayer) GetAddonsLayers() (map[string]*v1alpha1.AddonsLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonsLayers")
	ret0, _ := ret[0].(map[string]*v1alpha1.AddonsLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddonsLayers indicates an expected call of GetAddonsLayers
func (mr *MockLayerMockRecorder) GetAddonsLayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonsLayers", reflect.TypeOf((*MockLayer)(nil).GetAddonsLayers))
}
